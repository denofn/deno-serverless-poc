#!/bin/bash
function types {
  .deno/bin/deno types > types/index.d.ts;
}

function denoVersionTs {
  echo "export const DENO_VERSION = \"$DENO_VERSION\";" > ./src/DENO_VERSION.ts;
}

function installDeno {
  DENO_ASSET_PATH=$(curl -sSf https://github.com/denoland/deno/releases |
		grep -o "/denoland/deno/releases/download/.*/deno_osx_x64\\.gz" | head -n 1);
	if [ ! "$DENO_ASSET_PATH" ]; then exit 1; fi
	DENO_URI="https://github.com${DENO_ASSET_PATH}";
  BIN_DIR=".deno/bin";
  EXE="$BIN_DIR/deno";

  if [ ! -d "$BIN_DIR" ]; then
    mkdir -p "$BIN_DIR";
  fi

  curl -fL# -o "$EXE.gz" "$DENO_URI";
  gunzip -df "$EXE.gz";
  chmod +x "$EXE";

  echo $DENO_VERSION > DENO_VERSION;
  echo "Deno was successfully updated to version $DENO_VERSION";
}

echo "dvm ~> deno version manager";

LOCAL_DENO_VERSION=$(cat DENO_VERSION);
echo "Deno version:" $LOCAL_DENO_VERSION;

if [ "$1" == "build" ]; then
  DENO_DIR=.deno .deno/bin/deno bundle src/helloWorld.ts out.js;
elif [ "$1" == "types" ]; then
  types;
elif [ "$1" == "clean" ]; then
  echo "Cleaning deps";
  rm -rf .deno/deps;
  rm -rf .deno/gen;
elif [ "$1" == "bootstrap" ]; then
  echo "Fetching latest version";
  LATEST_DENO_VERSION=$(curl -sSf https://github.com/denoland/deno/releases |
    grep -o "download/.*/" | head -n 1 | cut -d'/' -f 2 );

  if [ $LATEST_DENO_VERSION != $LOCAL_DENO_VERSION ]; then
    echo "Github has a different version:" $LATEST_DENO_VERSION;
    echo "Bootstrapping with new version.";
    DENO_VERSION=$LATEST_DENO_VERSION;
    installDeno;
  else
    echo "Bootstrapping with local version, skipping Deno install.";
    DENO_VERSION=$LOCAL_DENO_VERSION;
  fi

  types;
  denoVersionTs;
fi
